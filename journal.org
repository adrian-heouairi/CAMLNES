Émulateur de NES en OCaml

Adrian HEOUAIRI adrian.heouairi@etu.u-paris.fr


<24/11/2022>
Faire un plan du projet, représentation des données, etc.


<15/12/2022>
FAIT :
  - documentation sur l'architecture de la NES
    + il faudra émuler le CPU, la puce graphique, la puce audio, le bus
À FAIRE :
  - se concentrer sur le CPU (pas le GPU pour l'instant)
  - utiliser des cartouches qui testent des fonctionnalités du CPU
  - mettre en place une infrastructure de tests (gitliba-ci, ou juste un script de tests) 
  - quelles structures de données OCaml choisir (e.g. pour le bus)
  
<11/01/2023>
FAIT :
- documenté sur le processeur de la NES (6502) et son jeu d'instructions ainsi que la carte graphique
- début d'implementation (jeu d'instructions, modes d'adressage…)
À FAIRE :
- réfléchir à utiliser plus d'aspects fonctionnels (fonctions plutôt que tables de hashage par exemple)
- regarder les variants poymorphes (pour les couples instruction, mode d'adressage)
- voir où les GADTs sont utilisés dans l'émulateur Gboy
- terminer le CPU
- implémenter le bus (array) (simple)
- ouvrir/charger un fichier NES

<1/2/2023>

Degorre

FAIT :
    - a enlevé tables de hachage
    - a regardé les variants polymorphes mais ne voit pas comment ils peuvent aider
    - regardé les GADT, mais a du mal à comprendre
    - CPU terminé
    - bus implémenté (par grand tableau)
    - chargement fichier NES (s'exécute et génère un log, plusieurs tests passent, d'autres non)
    
À FAIRE :
    - rectifier calendrier (trop exigeant)
    - corriger bug ému CPU (pour passer tous les tests)
    - implémenter partie graphique (à l'aide de SDL)
    - continuer à envisager les aspects fonctionnels
    
<22/2/23>
Degorre

Refactorisation impératif -> fonctionnel, exemple du bus:

Type actuel de write :
addr -> byte -> Unit

Nouveau type :
addr ->byte -> (addr -> byte) -> (addr -> byte)

Impélémentation (pseudocode) :
let write addr byte read = addr2 -> match addr2 with
        | addr -> byte
        | _ -> (read addr)
        
FAIT :
- implém CPU complète, passe les tests purement CPU, timing (nombre de cycles) pas forcément respecté
- puce graphique commencée :
   - implém mémoire
   - fonctions parsing mémoire
   - nouveau calendrier

À FAIRE :
 - partie graphique à continuer/finir
 - tests unitaires
 - refactorisations PF autant que possible (comment éviter les effets de bord ?)